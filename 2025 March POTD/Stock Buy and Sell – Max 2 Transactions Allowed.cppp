class Solution {
  public:
    int helper(int ind, int k, int hold, vector<int> &prices, vector<vector<vector<int>>> &dp){
        if(ind == prices.size() || k <= 0) return 0;
        
        if(dp[ind][k][hold] != -1e8) return dp[ind][k][hold];
        
        int sell = -1e7, notSell = -1e7, buy = -1e7, notBuy = -1e7;
        if(hold){
            sell = prices[ind] + helper(ind + 1, k - 1, 0, prices, dp);
            notSell = helper(ind + 1, k, 1, prices, dp);
        }
        else{
            buy = -prices[ind] + helper(ind + 1, k, 1, prices, dp);
            notBuy = helper(ind + 1, k, 0, prices, dp);
        }
        return dp[ind][k][hold] = max({sell, notSell, buy, notBuy});
    }
    int maxProfit(vector<int>& prices, int k) {
        // code here
        int n = prices.size();
        vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(k + 1, vector<int>(2, -1e8)));
        return helper(0, k, 0, prices, dp);
    }
  
    int maxProfit(vector<int> &prices) {
        // code here
        return maxProfit(prices, 2);
    }
};
